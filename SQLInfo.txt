-- Create RLS policy to allow any authenticated user to read their own user record
CREATE POLICY "Allow users to read their own user record"
ON public.users
FOR SELECT
USING (auth.uid() = auth_id);

-- Create a secure function to create a user profile
CREATE OR REPLACE FUNCTION public.create_user_profile(
  user_auth_id UUID,
  user_email TEXT,
  first_name TEXT,
  last_name TEXT,
  user_role TEXT DEFAULT 'donor'
) RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER -- This runs with the permissions of the function creator
AS $$
DECLARE
  new_user_id UUID;
BEGIN
  -- Insert the new user
  INSERT INTO public.users (
    auth_id,
    email,
    first_name,
    last_name,
    role
  ) VALUES (
    user_auth_id,
    user_email,
    first_name,
    last_name,
    user_role
  ) RETURNING id INTO new_user_id;

  -- If this is a donor, create a donor profile
  IF user_role = 'donor' THEN
    INSERT INTO public.donor_profiles (
      user_id,
      donation_total,
      projects_supported
    ) VALUES (
      new_user_id,
      0,
      0
    );
  END IF;

  RETURN new_user_id;
END;
$$;

-- Grant execute permission to the function for authenticated users
GRANT EXECUTE ON FUNCTION public.create_user_profile TO authenticated;
GRANT EXECUTE ON FUNCTION public.create_user_profile TO anon;

-- Grant insert permissions on user table for service role only
-- This won't affect normal users but allows our API route to create users
GRANT INSERT ON public.users TO service_role;
GRANT INSERT ON public.donor_profiles TO service_role;

-- Create RLS policy allowing any authenticated user to create a user record IF the auth.uid matches
CREATE POLICY "Allow users to create their own profile"
ON public.users
FOR INSERT
WITH CHECK (auth.uid() = auth_id);

-- Create an auto-create profile trigger on auth signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Auto insert a record for the new user
  INSERT INTO public.users (auth_id, email, first_name, last_name, role)
  VALUES (new.id, new.email, '', '', 'donor');
  
  RETURN new;
END;
$$;

-- Add the trigger to automatically create profiles 
-- (Note: Only enable this if you don't need to collect first_name/last_name during signup)
-- CREATE TRIGGER on_auth_user_created
--   AFTER INSERT ON auth.users
--   FOR EACH ROW EXECUTE FUNCTION public.handle_new_user(); 




-- Alternative approach for creating a test teacher without requiring auth.users entry

-- Begin a transaction
BEGIN;

-- First, temporarily disable the foreign key constraint for testing
-- Note: In production, you would NOT do this. This is only for testing.
ALTER TABLE users DROP CONSTRAINT IF EXISTS users_auth_id_fkey;

-- Create a user with the 'teacher' role (without auth_id reference)
INSERT INTO users (
    id, 
    email, 
    first_name, 
    last_name, 
    profile_image_url, 
    role, 
    phone_number, 
    address, 
    city, 
    state, 
    postal_code, 
    country
) VALUES (
    '123e4567-e89b-12d3-a456-426614174000'::uuid,
    'test.teacher@school.edu',
    'Jane',
    'Doe',
    'https://randomuser.me/api/portraits/women/44.jpg',
    'teacher',
    '555-123-4567',
    '123 School Street',
    'Springfield',
    'IL',
    '62701',
    'USA'
);

-- Create a teacher profile for this user
INSERT INTO teacher_profiles (
    id,
    user_id,
    school_name,
    school_district,
    school_address,
    school_city,
    school_state,
    school_postal_code,
    position_title,
    employment_verified,
    nonprofit_status_verified,
    guidestar_charity_id,
    account_status,
    instagram_username
) VALUES (
    '123e4567-e89b-12d3-a456-426614174001'::uuid,
    '123e4567-e89b-12d3-a456-426614174000'::uuid, -- Reference to the user we just created
    'Springfield Elementary School',
    'Springfield School District',
    '456 Education Avenue',
    'Springfield',
    'IL',
    '62701',
    'Science Teacher',
    TRUE, -- Already verified for testing
    TRUE, -- Already verified for testing
    'GS12345',
    'approved', -- Account already approved for testing
    'msscienceteacher'
);

-- Create some categories that the teacher might be interested in
INSERT INTO categories (
    id,
    name,
    description,
    icon_url,
    display_order,
    is_active
) VALUES
    ('123e4567-e89b-12d3-a456-426614174010'::uuid, 'Science', 'Science and STEM projects', '/icons/science.png', 1, TRUE),
    ('123e4567-e89b-12d3-a456-426614174011'::uuid, 'Technology', 'Technology and computer science projects', '/icons/technology.png', 2, TRUE),
    ('123e4567-e89b-12d3-a456-426614174012'::uuid, 'Art', 'Art and creative projects', '/icons/art.png', 3, TRUE)
ON CONFLICT (name) DO NOTHING;

-- Add teacher's interests
INSERT INTO user_interests (
    user_id,
    category_id
) VALUES
    ('123e4567-e89b-12d3-a456-426614174000'::uuid, '123e4567-e89b-12d3-a456-426614174010'::uuid),
    ('123e4567-e89b-12d3-a456-426614174000'::uuid, '123e4567-e89b-12d3-a456-426614174011'::uuid)
ON CONFLICT (user_id, category_id) DO NOTHING;

-- Create a test project for this teacher
INSERT INTO projects (
    id,
    teacher_id,
    title,
    description,
    student_impact,
    funding_goal,
    current_amount,
    start_date,
    end_date,
    main_image_url,
    status,
    featured,
    donor_count,
    published_at
) VALUES (
    '123e4567-e89b-12d3-a456-426614174020'::uuid,
    '123e4567-e89b-12d3-a456-426614174001'::uuid, -- Reference to the teacher profile
    'Classroom Science Lab Equipment',
    'Help equip our science lab with new microscopes, beakers, and other essential tools for hands-on science experiments. These tools will enable students to conduct real experiments and gain practical science skills.',
    'This project will impact 125 students across 5 class periods, giving them hands-on experience with real scientific equipment and experiments that align with NGSS standards.',
    1200.00,
    450.00, -- Some funding already received for testing
    CURRENT_DATE,
    CURRENT_DATE + INTERVAL '30 days',
    'https://images.unsplash.com/photo-1532094349884-543019a69b2f',
    'active',
    TRUE,
    5, -- Some donors already for testing
    CURRENT_TIMESTAMP - INTERVAL '5 days'
);

-- Add project categories
INSERT INTO project_categories (
    project_id,
    category_id
) VALUES
    ('123e4567-e89b-12d3-a456-426614174020'::uuid, '123e4567-e89b-12d3-a456-426614174010'::uuid),
    ('123e4567-e89b-12d3-a456-426614174020'::uuid, '123e4567-e89b-12d3-a456-426614174011'::uuid)
ON CONFLICT (project_id, category_id) DO NOTHING;

-- Add a project update
INSERT INTO project_updates (
    project_id,
    title,
    content,
    image_url
) VALUES (
    '123e4567-e89b-12d3-a456-426614174020'::uuid,
    'Project Launch Update',
    'We are excited to announce the launch of our classroom science lab equipment fundraiser! Thank you to everyone who has already contributed. The students are thrilled about the possibility of new equipment.',
    'https://images.unsplash.com/photo-1583468982228-19f19164aee2'
);

-- Add a notification for the teacher
INSERT INTO notifications (
    user_id,
    title,
    message,
    type,
    is_read,
    related_entity_id,
    related_entity_type
) VALUES (
    '123e4567-e89b-12d3-a456-426614174000'::uuid,
    'Welcome to Beyond Measure',
    'Thank you for joining Beyond Measure! Your account has been approved, and you can now create projects to fund your classroom needs.',
    'welcome',
    FALSE,
    NULL,
    NULL
);

-- Commit the transaction
COMMIT;

-- Note: In a real application, you'd want to create an actual user in Supabase Auth
-- and then reference that user's ID in your users table. Here's a proper approach:
--
-- 1. Using Supabase UI or API, create a user (e.g., test.teacher@school.edu)
-- 2. Get the auth.users.id for that user
-- 3. Update your INSERT statement to use that ID:
--
-- UPDATE users SET auth_id = 'actual-auth-user-id-from-supabase'
-- WHERE id = '123e4567-e89b-12d3-a456-426614174000'::uuid;




-- Enable RLS (Row Level Security) on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE teacher_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE donor_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_interests ENABLE ROW LEVEL SECURITY;
ALTER TABLE project_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE project_updates ENABLE ROW LEVEL SECURITY;
ALTER TABLE donations ENABLE ROW LEVEL SECURITY;
ALTER TABLE favorite_projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE favorite_teachers ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE project_reviews ENABLE ROW LEVEL SECURITY;

-- Create application roles
CREATE TYPE app_role AS ENUM ('teacher', 'donor', 'admin');

-- Helper function to get current user's role
CREATE OR REPLACE FUNCTION get_user_role()
RETURNS app_role
LANGUAGE sql SECURITY DEFINER
AS $$
  SELECT role::app_role FROM users WHERE auth_id = auth.uid();
$$;

-- Helper function to check if current user is admin
CREATE OR REPLACE FUNCTION is_admin()
RETURNS boolean
LANGUAGE sql SECURITY DEFINER
AS $$
  SELECT role = 'admin' FROM users WHERE auth_id = auth.uid();
$$;

-- Helper function to check if a teacher is verified
CREATE OR REPLACE FUNCTION is_teacher_verified(teacher_id uuid)
RETURNS boolean
LANGUAGE sql SECURITY DEFINER
AS $$
  SELECT account_status = 'approved' 
  FROM teacher_profiles 
  WHERE id = teacher_id;
$$;

-- Row Level Security Policies

-- Users policies
CREATE POLICY "Users can view their own profile"
ON users FOR SELECT
USING (auth_id = auth.uid());

CREATE POLICY "Users can update their own profile"
ON users FOR UPDATE
USING (auth_id = auth.uid());

CREATE POLICY "Admins can view all users"
ON users FOR SELECT
USING (is_admin());

CREATE POLICY "Admins can update all users"
ON users FOR UPDATE
USING (is_admin());

-- Teacher profiles policies
CREATE POLICY "Teachers can view their own profile"
ON teacher_profiles FOR SELECT
USING ((SELECT auth_id FROM users WHERE id = teacher_profiles.user_id) = auth.uid());

CREATE POLICY "Teachers can update their own profile"
ON teacher_profiles FOR UPDATE
USING ((SELECT auth_id FROM users WHERE id = teacher_profiles.user_id) = auth.uid());

CREATE POLICY "Everyone can view approved teacher profiles"
ON teacher_profiles FOR SELECT
USING (account_status = 'approved');

CREATE POLICY "Admins can view all teacher profiles"
ON teacher_profiles FOR SELECT
USING (is_admin());

CREATE POLICY "Admins can update all teacher profiles"
ON teacher_profiles FOR UPDATE
USING (is_admin());

-- Donor profiles policies
CREATE POLICY "Donors can view their own profile"
ON donor_profiles FOR SELECT
USING ((SELECT auth_id FROM users WHERE id = donor_profiles.user_id) = auth.uid());

CREATE POLICY "Donors can update their own profile"
ON donor_profiles FOR UPDATE
USING ((SELECT auth_id FROM users WHERE id = donor_profiles.user_id) = auth.uid());

CREATE POLICY "Admins can view all donor profiles"
ON donor_profiles FOR SELECT
USING (is_admin());

CREATE POLICY "Admins can update all donor profiles"
ON donor_profiles FOR UPDATE
USING (is_admin());

-- Categories policies
CREATE POLICY "Everyone can view active categories"
ON categories FOR SELECT
USING (is_active = true);

CREATE POLICY "Admins can manage categories"
ON categories FOR ALL
USING (is_admin());

-- Projects policies
CREATE POLICY "Teachers can view their own projects"
ON projects FOR SELECT
USING ((SELECT auth_id FROM users 
        JOIN teacher_profiles ON users.id = teacher_profiles.user_id 
        WHERE teacher_profiles.id = projects.teacher_id) = auth.uid());

CREATE POLICY "Teachers can update their own projects"
ON projects FOR UPDATE
USING ((SELECT auth_id FROM users 
        JOIN teacher_profiles ON users.id = teacher_profiles.user_id 
        WHERE teacher_profiles.id = projects.teacher_id) = auth.uid());

CREATE POLICY "Everyone can view active and funded projects"
ON projects FOR SELECT
USING (status IN ('active', 'funded', 'completed'));

CREATE POLICY "Admins can manage all projects"
ON projects FOR ALL
USING (is_admin());

-- Donations policies
CREATE POLICY "Donors can view their own donations"
ON donations FOR SELECT
USING ((SELECT auth_id FROM users 
        JOIN donor_profiles ON users.id = donor_profiles.user_id 
        WHERE donor_profiles.id = donations.donor_id) = auth.uid());

CREATE POLICY "Teachers can view donations to their projects"
ON donations FOR SELECT
USING ((SELECT auth_id FROM users 
        JOIN teacher_profiles ON users.id = teacher_profiles.user_id 
        JOIN projects ON teacher_profiles.id = projects.teacher_id 
        WHERE projects.id = donations.project_id) = auth.uid());

CREATE POLICY "Admins can view all donations"
ON donations FOR SELECT
USING (is_admin());

-- Project updates policies
CREATE POLICY "Everyone can view project updates for active projects"
ON project_updates FOR SELECT
USING ((SELECT status FROM projects WHERE id = project_updates.project_id) IN ('active', 'funded', 'completed'));

CREATE POLICY "Teachers can manage updates for their projects"
ON project_updates FOR ALL
USING ((SELECT auth_id FROM users 
        JOIN teacher_profiles ON users.id = teacher_profiles.user_id 
        JOIN projects ON teacher_profiles.id = projects.teacher_id 
        WHERE projects.id = project_updates.project_id) = auth.uid());

CREATE POLICY "Admins can manage all updates"
ON project_updates FOR ALL
USING (is_admin());

-- Notifications policies
CREATE POLICY "Users can view their own notifications"
ON notifications FOR SELECT
USING ((SELECT auth_id FROM users WHERE id = notifications.user_id) = auth.uid());

CREATE POLICY "Users can update their own notifications"
ON notifications FOR UPDATE
USING ((SELECT auth_id FROM users WHERE id = notifications.user_id) = auth.uid());

CREATE POLICY "Admins can manage all notifications"
ON notifications FOR ALL
USING (is_admin());

-- Create views for commonly accessed data

-- Active projects view
CREATE VIEW active_projects AS
SELECT 
    p.*,
    u.first_name || ' ' || u.last_name AS teacher_name,
    tp.school_name,
    tp.instagram_username AS teacher_instagram,
    array_agg(c.name) AS categories
FROM 
    projects p
JOIN 
    teacher_profiles tp ON p.teacher_id = tp.id
JOIN 
    users u ON tp.user_id = u.id
LEFT JOIN 
    project_categories pc ON p.id = pc.project_id
LEFT JOIN 
    categories c ON pc.category_id = c.id
WHERE 
    p.status = 'active'
GROUP BY 
    p.id, u.id, tp.id;

-- Teacher dashboard view
CREATE VIEW teacher_dashboard AS
SELECT 
    tp.id AS teacher_profile_id,
    u.id AS user_id,
    u.first_name || ' ' || u.last_name AS teacher_name,
    tp.school_name,
    tp.account_status,
    COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'draft') AS draft_projects,
    COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'pending_review') AS pending_projects,
    COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'active') AS active_projects,
    COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'funded') AS funded_projects,
    COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'completed') AS completed_projects,
    SUM(p.funding_goal) FILTER (WHERE p.status IN ('active', 'funded', 'completed')) AS total_funding_requested,
    SUM(p.current_amount) FILTER (WHERE p.status IN ('active', 'funded', 'completed')) AS total_funding_received
FROM 
    teacher_profiles tp
JOIN 
    users u ON tp.user_id = u.id
LEFT JOIN 
    projects p ON tp.id = p.teacher_id
GROUP BY 
    tp.id, u.id;

-- Donor dashboard view
CREATE VIEW donor_dashboard AS
SELECT 
    dp.id AS donor_profile_id,
    u.id AS user_id,
    u.first_name || ' ' || u.last_name AS donor_name,
    dp.donation_total,
    dp.projects_supported,
    COUNT(DISTINCT p.teacher_id) AS teachers_supported,
    COUNT(DISTINCT pc.category_id) AS categories_supported,
    array_agg(DISTINCT c.name) AS supported_categories
FROM 
    donor_profiles dp
JOIN 
    users u ON dp.user_id = u.id
LEFT JOIN 
    donations d ON dp.id = d.donor_id
LEFT JOIN 
    projects p ON d.project_id = p.id
LEFT JOIN 
    project_categories pc ON p.id = pc.project_id
LEFT JOIN 
    categories c ON pc.category_id = c.id
GROUP BY 
    dp.id, u.id;

-- Project funding view
CREATE VIEW project_funding AS
SELECT 
    p.id AS project_id,
    p.title,
    p.funding_goal,
    p.current_amount,
    (p.current_amount / p.funding_goal * 100) AS percent_funded,
    p.donor_count,
    p.end_date,
    CASE 
        WHEN p.end_date < NOW() AND p.current_amount < p.funding_goal THEN true
        ELSE false
    END AS is_expired,
    CASE 
        WHEN p.current_amount >= p.funding_goal THEN true
        ELSE false
    END AS is_fully_funded,
    tp.id AS teacher_id,
    u.first_name || ' ' || u.last_name AS teacher_name
FROM 
    projects p
JOIN 
    teacher_profiles tp ON p.teacher_id = tp.id
JOIN 
    users u ON tp.user_id = u.id
WHERE 
    p.status IN ('active', 'funded', 'completed');

-- Projects by category view
CREATE VIEW projects_by_category AS
SELECT 
    c.id AS category_id,
    c.name AS category_name,
    p.id AS project_id,
    p.title,
    p.funding_goal,
    p.current_amount,
    p.status,
    tp.id AS teacher_id,
    u.first_name || ' ' || u.last_name AS teacher_name
FROM 
    categories c
JOIN 
    project_categories pc ON c.id = pc.category_id
JOIN 
    projects p ON pc.project_id = p.id
JOIN 
    teacher_profiles tp ON p.teacher_id = tp.id
JOIN 
    users u ON tp.user_id = u.id
WHERE 
    p.status IN ('active', 'funded', 'completed')
    AND c.is_active = true;

-- Create stored procedures for common operations

-- Add/update project with categories
CREATE OR REPLACE FUNCTION create_or_update_project(
    p_teacher_id UUID,
    p_title TEXT,
    p_description TEXT,
    p_student_impact TEXT,
    p_funding_goal DECIMAL,
    p_main_image_url TEXT,
    p_category_ids UUID[],
    p_project_id UUID DEFAULT NULL
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_project_id UUID;
    v_category_id UUID;
BEGIN
    -- Ensure the user is either an admin or the teacher who owns this project
    IF NOT is_admin() AND NOT EXISTS (
        SELECT 1 FROM teacher_profiles tp
        JOIN users u ON tp.user_id = u.id
        WHERE tp.id = p_teacher_id AND u.auth_id = auth.uid()
    ) THEN
        RAISE EXCEPTION 'Not authorized to manage this project';
    END IF;
    
    -- Create or update the project
    IF p_project_id IS NULL THEN
        -- Create new project
        INSERT INTO projects (
            teacher_id, title, description, student_impact,
            funding_goal, main_image_url, status
        ) VALUES (
            p_teacher_id, p_title, p_description, p_student_impact,
            p_funding_goal, p_main_image_url, 'draft'
        )
        RETURNING id INTO v_project_id;
    ELSE
        -- Update existing project
        UPDATE projects SET
            title = p_title,
            description = p_description,
            student_impact = p_student_impact,
            funding_goal = p_funding_goal,
            main_image_url = p_main_image_url,
            updated_at = NOW()
        WHERE id = p_project_id
        RETURNING id INTO v_project_id;
        
        -- Delete existing categories
        DELETE FROM project_categories WHERE project_id = v_project_id;
    END IF;
    
    -- Add categories
    FOREACH v_category_id IN ARRAY p_category_ids
    LOOP
        INSERT INTO project_categories (project_id, category_id)
        VALUES (v_project_id, v_category_id);
    END LOOP;
    
    RETURN v_project_id;
END;
$$;

-- Submit project for review
CREATE OR REPLACE FUNCTION submit_project_for_review(p_project_id UUID)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_teacher_id UUID;
    v_is_verified BOOLEAN;
BEGIN
    -- Check authorization
    SELECT teacher_id INTO v_teacher_id FROM projects WHERE id = p_project_id;
    
    IF NOT is_admin() AND NOT EXISTS (
        SELECT 1 FROM teacher_profiles tp
        JOIN users u ON tp.user_id = u.id
        WHERE tp.id = v_teacher_id AND u.auth_id = auth.uid()
    ) THEN
        RAISE EXCEPTION 'Not authorized to submit this project';
    END IF;
    
    -- Check if teacher is verified
    SELECT account_status = 'approved' INTO v_is_verified 
    FROM teacher_profiles 
    WHERE id = v_teacher_id;
    
    IF NOT v_is_verified THEN
        RAISE EXCEPTION 'Teacher account must be approved before submitting projects';
    END IF;
    
    -- Update project status
    UPDATE projects 
    SET status = 'pending_review', updated_at = NOW()
    WHERE id = p_project_id AND status = 'draft';
    
    RETURN FOUND;
END;
$$;

-- Record donation and update project funding
CREATE OR REPLACE FUNCTION record_donation(
    p_donor_id UUID,
    p_project_id UUID,
    p_amount DECIMAL,
    p_is_anonymous BOOLEAN,
    p_message TEXT,
    p_stripe_payment_id TEXT
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_donation_id UUID;
    v_project_status TEXT;
BEGIN
    -- Check project is active
    SELECT status INTO v_project_status FROM projects WHERE id = p_project_id;
    
    IF v_project_status != 'active' THEN
        RAISE EXCEPTION 'Donations can only be made to active projects';
    END IF;
    
    -- Record the donation
    INSERT INTO donations (
        donor_id, project_id, amount, is_anonymous,
        message, stripe_payment_id, status
    ) VALUES (
        p_donor_id, p_project_id, p_amount, p_is_anonymous,
        p_message, p_stripe_payment_id, 'completed'
    )
    RETURNING id INTO v_donation_id;
    
    -- Update project funding and donor count
    UPDATE projects
    SET 
        current_amount = current_amount + p_amount,
        donor_count = donor_count + 1,
        updated_at = NOW(),
        status = CASE 
            WHEN current_amount + p_amount >= funding_goal THEN 'funded'
            ELSE status
        END
    WHERE id = p_project_id;
    
    -- Update donor stats
    UPDATE donor_profiles
    SET 
        donation_total = donation_total + p_amount,
        projects_supported = (
            SELECT COUNT(DISTINCT project_id) 
            FROM donations 
            WHERE donor_id = p_donor_id AND status = 'completed'
        ),
        updated_at = NOW()
    WHERE id = p_donor_id;
    
    -- Create notification for teacher
    INSERT INTO notifications (
        user_id,
        title,
        message,
        type,
        related_entity_id,
        related_entity_type
    )
    SELECT 
        tp.user_id,
        'New donation received!',
        'Your project "' || p.title || '" received a donation of $' || p_amount::text,
        'donation',
        p_project_id,
        'project'
    FROM 
        projects p
    JOIN 
        teacher_profiles tp ON p.teacher_id = tp.id
    WHERE 
        p.id = p_project_id;
    
    RETURN v_donation_id;
END;
$$;

-- Review project (for admins)
CREATE OR REPLACE FUNCTION review_project(
    p_project_id UUID,
    p_reviewer_id UUID,
    p_status TEXT,
    p_notes TEXT,
    p_start_date TIMESTAMPTZ DEFAULT NULL,
    p_end_date TIMESTAMPTZ DEFAULT NULL
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Ensure reviewer is an admin
    IF NOT is_admin() THEN
        RAISE EXCEPTION 'Only administrators can review projects';
    END IF;
    
    -- Create review record
    INSERT INTO project_reviews (
        project_id, reviewer_id, status, notes
    ) VALUES (
        p_project_id, p_reviewer_id, p_status, p_notes
    );
    
    -- Update project status based on review
    IF p_status = 'approved' THEN
        UPDATE projects
        SET 
            status = 'active',
            start_date = COALESCE(p_start_date, NOW()),
            end_date = COALESCE(p_end_date, NOW() + interval '30 days'),
            published_at = NOW(),
            updated_at = NOW()
        WHERE id = p_project_id;
        
        -- Create notification for teacher
        INSERT INTO notifications (
            user_id,
            title,
            message,
            type,
            related_entity_id,
            related_entity_type
        )
        SELECT 
            tp.user_id,
            'Project Approved!',
            'Your project "' || p.title || '" has been approved and is now active.',
            'project_approval',
            p_project_id,
            'project'
        FROM 
            projects p
        JOIN 
            teacher_profiles tp ON p.teacher_id = tp.id
        WHERE 
            p.id = p_project_id;
    ELSE
        UPDATE projects
        SET 
            status = CASE 
                WHEN p_status = 'denied' THEN 'denied'
                ELSE 'draft' -- Needs revision
            END,
            updated_at = NOW()
        WHERE id = p_project_id;
        
        -- Create notification for teacher
        INSERT INTO notifications (
            user_id,
            title,
            message,
            type,
            related_entity_id,
            related_entity_type
        )
        SELECT 
            tp.user_id,
            CASE 
                WHEN p_status = 'denied' THEN 'Project Denied'
                ELSE 'Project Needs Revision'
            END,
            'Your project "' || p.title || '" ' || 
            CASE 
                WHEN p_status = 'denied' THEN 'has been denied. Reason: '
                ELSE 'needs revision. Details: '
            END || p_notes,
            'project_review',
            p_project_id,
            'project'
        FROM 
            projects p
        JOIN 
            teacher_profiles tp ON p.teacher_id = tp.id
        WHERE 
            p.id = p_project_id;
    END IF;
    
    RETURN TRUE;
END;
$$;

-- Mark project as completed and schedule disbursement
CREATE OR REPLACE FUNCTION complete_project(
    p_project_id UUID,
    p_disbursement_date TIMESTAMPTZ DEFAULT NULL
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Ensure user is an admin
    IF NOT is_admin() THEN
        RAISE EXCEPTION 'Only administrators can complete projects';
    END IF;
    
    -- Update project status
    UPDATE projects
    SET 
        status = 'completed',
        completed_at = NOW(),
        disbursement_status = 'pending',
        disbursement_date = COALESCE(p_disbursement_date, NOW() + interval '7 days'),
        updated_at = NOW()
    WHERE 
        id = p_project_id AND 
        status = 'funded';
    
    -- Create notification for teacher
    INSERT INTO notifications (
        user_id,
        title,
        message,
        type,
        related_entity_id,
        related_entity_type
    )
    SELECT 
        tp.user_id,
        'Project Completed!',
        'Your project "' || p.title || '" has been marked as completed. Funds will be disbursed on ' || 
        to_char(COALESCE(p_disbursement_date, NOW() + interval '7 days'), 'YYYY-MM-DD'),
        'project_completion',
        p_project_id,
        'project'
    FROM 
        projects p
    JOIN 
        teacher_profiles tp ON p.teacher_id = tp.id
    WHERE 
        p.id = p_project_id;
    
    RETURN FOUND;
END;
$$;

-- Verify teacher account
CREATE OR REPLACE FUNCTION verify_teacher_account(
    p_teacher_profile_id UUID,
    p_employment_verified BOOLEAN,
    p_nonprofit_verified BOOLEAN,
    p_guidestar_charity_id TEXT DEFAULT NULL
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Ensure user is an admin
    IF NOT is_admin() THEN
        RAISE EXCEPTION 'Only administrators can verify teacher accounts';
    END IF;
    
    -- Update teacher profile
    UPDATE teacher_profiles
    SET 
        employment_verified = p_employment_verified,
        nonprofit_status_verified = p_nonprofit_verified,
        guidestar_charity_id = p_guidestar_charity_id,
        account_status = CASE 
            WHEN p_employment_verified AND p_nonprofit_verified THEN 'approved'
            ELSE 'denied'
        END,
        updated_at = NOW()
    WHERE id = p_teacher_profile_id;
    
    -- Create notification for teacher
    INSERT INTO notifications (
        user_id,
        title,
        message,
        type,
        related_entity_id,
        related_entity_type
    )
    SELECT 
        tp.user_id,
        CASE 
            WHEN p_employment_verified AND p_nonprofit_verified THEN 'Account Approved!'
            ELSE 'Account Verification Failed'
        END,
        CASE 
            WHEN p_employment_verified AND p_nonprofit_verified THEN 
                'Your account has been verified and approved. You can now create projects!'
            ELSE 
                'Your account verification failed. Please contact support for more information.'
        END,
        'account_verification',
        tp.id,
        'teacher_profile'
    FROM 
        teacher_profiles tp
    WHERE 
        tp.id = p_teacher_profile_id;
    
    RETURN FOUND;
END;
$$;

-- Set up database triggers

-- Update timestamp trigger
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

-- Apply timestamp triggers to all tables
CREATE TRIGGER update_users_timestamp
BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_teacher_profiles_timestamp
BEFORE UPDATE ON teacher_profiles
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_donor_profiles_timestamp
BEFORE UPDATE ON donor_profiles
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_categories_timestamp
BEFORE UPDATE ON categories
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_projects_timestamp
BEFORE UPDATE ON projects
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_project_updates_timestamp
BEFORE UPDATE ON project_updates
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_notifications_timestamp
BEFORE UPDATE ON notifications
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

-- Automatic project status update trigger
CREATE OR REPLACE FUNCTION check_project_expired()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- If project end date has passed and it's still active, mark as expired
    IF NEW.status = 'active' AND NEW.end_date < NOW() THEN
        NEW.status := 'expired';
    -- If project becomes fully funded, update status
    ELSIF NEW.status = 'active' AND NEW.current_amount >= NEW.funding_goal THEN
        NEW.status := 'funded';
    END IF;
    
    RETURN NEW;
END;
$$;

CREATE TRIGGER project_auto_status_update
BEFORE UPDATE ON projects
FOR EACH ROW EXECUTE FUNCTION check_project_expired();

-- Function to search projects by keyword
CREATE OR REPLACE FUNCTION search_projects(search_term TEXT)
RETURNS TABLE (
    project_id UUID,
    title TEXT,
    description TEXT,
    teacher_name TEXT,
    school_name TEXT,
    funding_goal DECIMAL,
    current_amount DECIMAL,
    percent_funded DECIMAL,
    end_date TIMESTAMPTZ,
    status TEXT,
    categories TEXT[]
)
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT 
        p.id as project_id,
        p.title,
        p.description,
        u.first_name || ' ' || u.last_name AS teacher_name,
        tp.school_name,
        p.funding_goal,
        p.current_amount,
        (p.current_amount / p.funding_goal * 100) AS percent_funded,
        p.end_date,
        p.status,
        array_agg(DISTINCT c.name) AS categories
    FROM 
        projects p
    JOIN 
        teacher_profiles tp ON p.teacher_id = tp.id
    JOIN 
        users u ON tp.user_id = u.id
    LEFT JOIN 
        project_categories pc ON p.id = pc.project_id
    LEFT JOIN 
        categories c ON pc.category_id = c.id
    WHERE 
        p.status IN ('active', 'funded', 'completed')
        AND (
            p.title ILIKE '%' || search_term || '%'
            OR p.description ILIKE '%' || search_term || '%'
            OR p.student_impact ILIKE '%' || search_term || '%'
            OR u.first_name || ' ' || u.last_name ILIKE '%' || search_term || '%'
            OR tp.school_name ILIKE '%' || search_term || '%'
            OR c.name ILIKE '%' || search_term || '%'
        )
    GROUP BY 
        p.id, u.id, tp.id
    ORDER BY 
        CASE 
            WHEN p.status = 'active' THEN 0
            WHEN p.status = 'funded' THEN 1
            ELSE 2
        END,
        p.created_at DESC;
$$;




-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 1. Users
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    auth_id UUID UNIQUE REFERENCES auth.users(id),
    email TEXT UNIQUE NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    profile_image_url TEXT,
    role TEXT NOT NULL CHECK (role IN ('teacher', 'donor', 'admin')),
    phone_number TEXT,
    address TEXT,
    city TEXT,
    state TEXT,
    postal_code TEXT,
    country TEXT DEFAULT 'USA',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    last_login_at TIMESTAMPTZ
);

-- 2. Teacher Profiles
CREATE TABLE teacher_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    school_name TEXT NOT NULL,
    school_district TEXT,
    school_address TEXT NOT NULL,
    school_city TEXT NOT NULL,
    school_state TEXT NOT NULL,
    school_postal_code TEXT NOT NULL,
    position_title TEXT NOT NULL,
    employment_verified BOOLEAN DEFAULT FALSE,
    nonprofit_status_verified BOOLEAN DEFAULT FALSE,
    guidestar_charity_id TEXT,
    account_status TEXT NOT NULL DEFAULT 'pending' CHECK (account_status IN ('pending', 'approved', 'denied', 'inactive')),
    instagram_username TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 3. Donor Profiles
CREATE TABLE donor_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    donation_total DECIMAL(12,2) DEFAULT 0.00,
    projects_supported INTEGER DEFAULT 0,
    is_anonymous_by_default BOOLEAN DEFAULT FALSE,
    receives_updates_email BOOLEAN DEFAULT TRUE,
    stripe_customer_id TEXT,
    instagram_username TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 4. Categories/Interests
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT UNIQUE NOT NULL,
    description TEXT,
    icon_url TEXT,
    display_order INTEGER,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 5. Projects
CREATE TABLE projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    teacher_id UUID NOT NULL REFERENCES teacher_profiles(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    student_impact TEXT NOT NULL,
    funding_goal DECIMAL(12,2) NOT NULL,
    current_amount DECIMAL(12,2) DEFAULT 0.00,
    start_date TIMESTAMPTZ,
    end_date TIMESTAMPTZ,
    main_image_url TEXT,
    status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'pending_review', 'active', 'funded', 'completed', 'expired', 'denied')),
    featured BOOLEAN DEFAULT FALSE,
    donor_count INTEGER DEFAULT 0,
    is_extended BOOLEAN DEFAULT FALSE,
    disbursement_status TEXT DEFAULT NULL CHECK (disbursement_status IN (NULL, 'pending', 'processed', 'failed')),
    disbursement_date TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    published_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ
);

-- 6. User Interests
CREATE TABLE user_interests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    category_id UUID NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(user_id, category_id)
);

-- 7. Project Categories
CREATE TABLE project_categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    category_id UUID NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(project_id, category_id)
);

-- 8. Project Updates
CREATE TABLE project_updates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    image_url TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 9. Donations
CREATE TABLE donations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    donor_id UUID NOT NULL REFERENCES donor_profiles(id) ON DELETE CASCADE,
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    amount DECIMAL(12,2) NOT NULL,
    is_anonymous BOOLEAN DEFAULT FALSE,
    message TEXT,
    stripe_payment_id TEXT,
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'failed', 'refunded')),
    shared_on_instagram BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 10. Favorite Projects
CREATE TABLE favorite_projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(user_id, project_id)
);

-- 11. Favorite Teachers
CREATE TABLE favorite_teachers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    donor_id UUID NOT NULL REFERENCES donor_profiles(id) ON DELETE CASCADE,
    teacher_id UUID NOT NULL REFERENCES teacher_profiles(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(donor_id, teacher_id)
);

-- 12. Notifications
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    type TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    related_entity_id UUID,
    related_entity_type TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 13. Project Reviews
CREATE TABLE project_reviews (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    reviewer_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    status TEXT NOT NULL CHECK (status IN ('approved', 'denied', 'needs_revision')),
    notes TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);










## THIS SQL WORKS THIS IS JUST FOR YOUR REFERENCE. This is in supabase it multiple different snippets. 